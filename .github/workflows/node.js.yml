name: Node.js CI

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - feature/**

jobs:
  install:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # or the version you're using

      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.npm
            ~/.yarn
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          npm install

  build-client:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js for client
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install client dependencies
        run: |
          cd client
          npm install

      - name: Build React client
        run: |
          cd client
          npm run build

  build-server:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js for server
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install server dependencies
        run: |
          cd server
          npm install

      - name: Run tests for server
        run: |
          cd server
          npm test

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-client
      - build-server
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy to production
        run: |
          # Customize this with your deployment steps for both the client and server
          echo "Deploying both client and server..."
          # Example deploy command for client (e.g., to Netlify, Vercel, etc.)
          # netlify deploy --prod
          # Example deploy command for server (e.g., to AWS, DigitalOcean, etc.)
          # scp -r server/* user@production-server:/path/to/deploy
