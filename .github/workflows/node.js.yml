name: Node.js CI

on:
  push:
    branches:
      - master
      - development
  pull_request:
    branches:
      - master
      - feature/**

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache server dependencies
        uses: actions/cache@v3
        with:
          path: server/node_modules
          key: ${{ runner.os }}-server-yarn-${{ hashFiles('server/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-server-yarn-

      - name: Cache client dependencies
        uses: actions/cache@v3
        with:
          path: client/node_modules
          key: ${{ runner.os }}-client-yarn-${{ hashFiles('client/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-client-yarn-
        
      - name: Install server dependencies
        run: yarn install --frozen-lockfile
        working-directory: server

      - name: Install client dependencies
        run: yarn install --frozen-lockfile
        working-directory: client

      # - name: Run server tests
      #   run: yarn test
      #   working-directory: server

      # - name: Run client tests
      #   run: yarn test
      #   working-directory: client

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Deploy to production
        run: |
          # Customize this with your deployment steps for both the client and server
          echo "Deploying both client and server..."
          # Example deploy command for client (e.g., to Netlify, Vercel, etc.)
          # netlify deploy --prod
          # Example deploy command for server (e.g., to AWS, DigitalOcean, etc.)
          # scp -r server/* user@production-server:/path/to/deploy
